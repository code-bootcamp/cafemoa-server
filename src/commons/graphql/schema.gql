# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CafeTag {
  id: String!
  tagName: String!
  cafeInform: [CafeInform!]!
}

type Owner {
  id: String!
  name: String!
  email: String!
  phone: String!
  is_main: Boolean!
  is_cafeInform: Boolean!
}

type User {
  id: String!
  name: String!
  email: String!
  address: String!
  personalNumber: String!
  phoneNumber: String!
  age: String!
  profileImage: String!
}

type PickList {
  id: String!
  user: User!
  cafeInform: CafeInform!
}

type CafeInform {
  id: String!
  cafeinfo: String!
  closedDay: String!
  operatingTime: String!
  cafeAddr: String!
  like: Int!
  ownerNum: String!
  brandName: String!
  thumbNail: String!
  lat: Float!
  lng: Float!
  owner: Owner!
  cafeTag: [CafeTag!]!
}

type Category {
  id: String!
  category: String!
}

type Comment {
  id: String!
  reply: String!
  like: Int!
  time: DateTime!
  cafeinfo: CafeInform!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CommentImage {
  id: String!
  image_url: String!
  comment: Comment!
}

type Coupon {
  id: String!
  stamp: Int!
  accstamp: Int!
  user: User!
  cafeInform: CafeInform!
  createdAt: DateTime!
}

type OwnerComment {
  id: String!
  content: String!
  time: DateTime!
  owner: Owner!
  comment: Comment!
}

type Query {
  fetchOwnerComment(ownercommentId: String!): OwnerComment!
  fetchCommentImages: [CommentImage!]!
  fetchCommentImage(commentId: String!): CommentImage!
  fetchCoupon(couponId: String!): Coupon!
  fetchCoupons: [Coupon!]!
  fetchUserCoupons(userId: String!): [Coupon!]!
  fetchCafeCoupons(cafeId: String!): [Coupon!]!
  fetchMyPickLists: [PickList!]!
  fetchMyPickListLocation(Location: String!): [PickList!]!
  fetchUsers: [User!]!
  fetchUser(email: String!): User!
  fetchComments: [Comment!]!
  fetchComment(commentId: String!): Comment!
  fetchbestcomment: [Comment!]!
  fetchCommentWithTag(Tags: [String!]!): [Comment!]!
  fetchCategory: [Category!]!
  fetchOwners: [Owner!]!
  fetchOwner(ownerID: String!): Owner!
  fetchCafeInform(cafeInformID: String!): CafeInform!
  fetchCafeInformWithTag(Tags: [String!]!): [CafeInform!]!
  fetchCafeInformWithLocation(Location: String!): [CafeInform!]!
  fetchBestCafe: [CafeInform!]!
}

type Mutation {
  createOwnerComment(createOwnerCommentInput: CreateOwnerCommentInput!, ownerId: String!, commentID: String!): OwnerComment!
  updateOwnerComment(OwnerId: String!, UpdateOwnerCommentInput: UpdateOwnerCommentInput!): OwnerComment!
  deleteOwnerComment(ownerCommentId: String!): Boolean!
  ownerLogin(email: String!, password: String!): String!
  restoreOwnerAccessToken: String!
  ownerLogout: String!
  createCoupon(createCouponInput: CreateCouponInput!): Coupon!
  useCoupon(couponId: String!, password: String!): String!
  deleteCoupon(couponId: String!): String!
  userLogin(email: String!, password: String!): String!
  restoreAccessToken: String!
  userLogout: String!
  createUser(createUserInput: CreateUserInput!): User!
  emailVerify(email: String!): String!
  updateUser(userId: String!, updateUserInput: UpdateUserInput!): User!
  deleteUser(userId: String!): Boolean!
  findUserPwd(email: String!): String!
  createComment(createCommentinput: createCommentInput!, cafeinformId: String!): Comment!
  updateComment(commentId: String!, UpdateCommentInput: UpdateCommentInput!): Comment!
  deleteComment(commentId: String!): Boolean!
  createCategory(category: String!): Category!
  deleteCategory(categoryId: String!): Boolean!
  CreateOwner(createOwnerInput: OwnerInput!): Owner!
  deleteOwner: Boolean!
  updateOwner(updateOwnerInput: OwnerUpdateInput!): Owner!
  findOwnerPassword(email: String!): String!
  sendTokenToEmail(email: String!): Int!
  updateCafeInform(updateCafeInform: UpdateCafeInform!, CafeInformID: String!): CafeInform!
  CreatecafeInform(cafeInformInput: CafeInformInput!): CafeInform!
  PickCafe(CafeInformID: String!, UserID: String!): Int!
  deleteCafeInform(cafeInformID: String!): Boolean!
}

input CreateOwnerCommentInput {
  content: String!
}

input UpdateOwnerCommentInput {
  content: String
}

input CreateCouponInput {
  userId: String!
  cafeId: String!
  stamp: Int!
}

input CreateUserInput {
  name: String!
  email: String!
  address: String!
  personalNumber: String!
  phoneNumber: String!
  password: String!
  profileImage: String
}

input UpdateUserInput {
  name: String
  email: String
  address: String
  personalNumber: String
  phoneNumber: String
  password: String
  profileImage: String
}

input createCommentInput {
  reply: String!
  image_Url: [String!]!
}

input UpdateCommentInput {
  reply: String
  image_Url: [String!]
}

input OwnerInput {
  name: String!
  email: String!
  phone: String!
  is_main: Boolean!
  password: String!
  ownerPassword: String!
}

input OwnerUpdateInput {
  name: String
  email: String
  phone: String
  is_main: Boolean
  password: String
  ownerPassword: String
}

input UpdateCafeInform {
  cafeinfo: String
  closedDay: String
  operatingTime: String
  cafeAddr: String
  lat: Float
  lng: Float
  ownerNum: String
  brandName: String
  menu_imageUrl: [String!]
  cafe_imageUrl: [String!]
  cafeTag: [String!]!
}

input CafeInformInput {
  cafeinfo: String!
  closedDay: String!
  operatingTime: String!
  cafeAddr: String!
  lat: Float!
  lng: Float!
  ownerNum: String!
  brandName: String!
  cafeTag: [String!]!
  menu_imageUrl: [String!]!
  cafe_imageUrl: [String!]!
}